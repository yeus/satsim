HIL-Simulation
==============
- Ein Interface zwichen Rodos und Modelia

Verschiedenes:
==============
- für gemeinsame Grafik: "Basismodell" nur als Grafikmodell hitnerlegen
- EVS Simulation über Modelica
- Bei der Simulation eines einzelnen Bausteins auf Grenzwerte, wie z.B. max. Stromfluß über eine Schnittstelle achten usw...
- Implementierung v. Unit-Tests 
- AOCS Simulation: Anforderungen sollen eingehalten werden, bzw. herausgefunden werden.
- Alle Dateien mit folgender Copyright notice ausstatten:
- Modelle auch mit anderen Solvern als DASSL zum laufen bringen (z.B. runge-kutta)
  
  /*
  * Developer : Thomas Meschede (Thomas.Meschede@ilr.tu-berlin.de)
  * Date : 10/06/2013
  * All code (c)2013 Technische Universität Berlin, ILR, Fachgebiet Raumfahrttechnik, all rights reserved
  */

Liste von Komponentenmodellen
=============================
- PCU:
  - DCDC Converter: Es gibt ein ganz gutes Paper von Modelica um "solch einen" zu erstellen. ansonsten muss man sich eben mit einem simplen quasistationären Ersatzmodell behelfen (Wirkungsgrad + Spannugnsverlust)
    - DCDC Converter sind eine der wichtigsten Elemente im EVS. Da sollte untersucht werden, welche Vor/Nachteile verschiedene Wandler uns bringen.
    - z.Zt. noch sehr unrealistisch: muss durch ein realistisches Modell ersetzt werden.
- OBC
  - Mit ein klein bischen zufälligem Rauschen, was die Auslastung (und damit Energieverbrauch) angeht
- AOCS
  - Initialisierung: 
    - "zentrales" Modul definiert die Ausrichtung, Geschwindigkeit und 
    - ein beliebiges Modul bekommt Position, Orientierung und Geschwindigkeit vorgegeben und propagiert das dann durch die restlichen Bausteine
  - Alle Bausteine bestehen aus einem "Body", möglichst keine Punktmassen verwenden, da diese keine Orientierung haben können
  - 3-Achsen Reaktionsrad
  - Drallrad
  - Gyros
  - Lagesensorik
  - Triebwerke und Düsen


Analyse von Simulationsergebnisse:
==================================
- Python Skript für Auswertung.

Modell-Struktur in Modelica:
============================
- Wiederstände und andere Komponenten lassen sich über das Stichwort "replacable" parametrisieren
- separate Modelle für Thermal, EVS, Lageregelung und dann die einzelnen Bausteinklassen in einem "Supermodell" verheiraten?
- cardinality keyword -> feststellen, welche Schnittstellen verbunden sind, und welche nicht.
- connections können auch in for-loops/if Abfragen usw... deklariert werden!
- "terminate" Beendet Simulation nach einer vorgegeben Bedingung
- Record classes benutzen, um verschiedene Bausteinarten und Schnittstellenanzahl usw zu parametrisieren.

Experimente:
============
- Ein simulierter "Lockdown" der Solarzellen als Verifikation
- Versuch mithilfe von Magnetspulen den Satelliten zu stabilisieren
- Rückkopplungsverhalten bei Tag & Nachtwechsel zeigen
- Anzahl der Bausteine und Stabilität des EVS in Abhängigkeit der Energieerzeugung
- Anzahl der benötigten Batterien
- Anzahl der benötigten Solarzellen
- Maximale Verbrauchswerte für einzelne Bausteine in Abhängigkeit der Energieerzeugung (damit z.B. keine Thermalgrenzwerte überschritten werden.)
- Stabilität des EVS?
- PCU Regler testen
- AOCS testen


Bausteinkatalog/XML:
====================

parametrisierte Komponenten
---------------------------
- Komponenten durch Parameterfunktion darstellen
- Beispiel: Wenn Komponente "Reaktionsrad" doppelt so viele Moment erzeugen kann, dann ist sie viermal so schwer. (m = 2 * tau_max)
- Komponenten durch modelica Modelle ersetzen
- Optimierung Anhand dieser Funktionen
- benötigte Komponenten 
  - Bausteinstruktur
  - Raktionsräder
  - Tank
  - Batterien
  - Solarzellen
  - Thruster
  - Bausteintypen: 
    - Verbraucher
    - Tankbausteine
    - ...

spezifische Werte:
------------------
- neue Werte: min_power, nominal_power und mean power (mean power wird in Simulation berechnet), max_power. 
- Orientierung der Thruster/Drallräder/Sensoren innerhalb der Bausteine muss noch aufgeschrieben werden.
- Baustein Positionen sind noch fehlerhaft
- Bausteingrößen müssen noch angegeben werden
- Baustein Orientierung muss in den Katalog
- bausteinpositionen und Orientierung im Satelliten müssen in ordnung gebracht werden (z.B. Enmap Ausrichtung mit launchadapter in Zn Richtung)
- Definitionen für Mehrfachbausteine anpassen

verschiedenes:
--------------
- max_power und power, das verbraucht wird, muss überarbeitet werden (z.B. elektr. BS: PSCU und Triebwerk haben beide als power_max 5000W angegeben, es handelt sich jedoch nicht in beiden Fällen um Verbrauchswerte)
- verwendeten Komponentenkatalog zusammen mit Bausteinkatalog optimieren
- Volumenausnutzung und Packungsdichte (kg/m³) Für Gesamtsatelliten und für die einzelnen Bausteine
- Vergleich all dieser Werte mit den "herkömmlichen" Missionen
- Bausteine müssen angeben, wie ihre "Form" ist. z.B. in Form einer Liste von Positions-Vektoren
- Verbrauch analysieren
- dc. implementieren
- Inhalt eines Bausteins analysieren, modifizieren
- Verbrauch Racktionrad = Drallrad?
