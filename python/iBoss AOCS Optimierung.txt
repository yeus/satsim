iBoss AOCS Optimierung
======================

Bewertungsalgorithmus
---------------------

Berechnung von Satellitenkennwerten
...................................  

Methode1:
*********

1. Zuerst werden sämtliche angreifenden Kräfte und Momente aus allen Bausteinen gesammelt und in einer Liste gespeichert (todo: Bild eines Satelliten mit vielen angreifenden Kräften und Momenten).
2. Generierung eines weiteren Kräfteraums aus einer Anflugtrajektorie mithilfe eines Standard-Reglers. Daraus wird dann ein Kräfte-/Momentenraum erzeugt.
3. Anschließend wird aus diesen Kräften einen *Schubkräftepolytop* gebildet
4. Überlagerung der beiden Räume und Vergleich der Volumenschnittmenge mit dem Gesamtvolumen. Je Näher dieser Wert an 1 ist, desto geeigneter ist eine Düsenkonfiguration

Methode2:
*********
  
1. Zuerst werden sämtliche angreifenden Kräfte und Momente :math:`F_{th,i}, M_{th,i}` aus allen Bausteinen gesammelt und in einer Liste gespeichert (todo: Bild eines Satelliten mit vielen angreifenden Kräften und Momenten).
2. Generierung eines diskreten Kräfte-/Momentenpfades aus N Punkten :math:`t_j` bis zum Zeitpunkt :math:`t_N` (:math:`F_R(t_j), M_R(t_j)`) aus einer Anflugtrajektorie mithilfe eines Standard-Reglers.
3. Danach wird mithilfe der Schubkräfte und Momente :math:`F_{th,i}, M_{th,i}` aus (1.) versucht, die aufgenommenen Pfade :math:`F(t_j), M(t_j)` nachzubilden:
  
    .. math:: F(t_j)=\sum_i{\alpha_{i,j} F_{th,i}}
    
   Dabei gibt es meistens für F(t_j) unendlich viele Linearkombinationen :math:`\alpha_{i,j}`. Aber in bestimmten Fällen nur eine einzige Lösung oder keine.
   
   Die "Güte" für jeden Zeitpunkt :math:`t_j` wird durch eine Bewertungsfunktion :math:`B(\alpha_{i,j})` bestimmt. Die Bewertungsfunktion zieht Kriterien, wie DeltaV, verbrauchte Treibstoffmasse m_i, usw. heran.: todo: Formel für B.
   
   Die Güte oder *Fittness* insgesamt lässt sich dann durch:
     
    .. math:: Fittness=\sum_j{B(\alpha_{i,j})}
   
   ausdrücken.
    
   Analog wird dabei für die Momente vorgangen. Dabei ergibt sich für alle Richtungen ein Verhältnis von Zielkraft und erreichter Kraft. Ein Verhältnis von 1 ist dabei der optimale Wert.
   
Methode3:
*********
  
1. Wie in Methode2 Schritt 2, wird zuerst ein Kräfte- und Momentenpfad generiert: :math:`F_R(t_i), M_R(t_i)`
2. Auch hier wird wieder versucht mithilfe einer Linearkombination von Kräften diesen Pfad nachzubilden:
  
    .. math:: F(t_j)=\sum_i{\alpha_{i,j} F_{th,i}}
    
   Allerdings werden dazu nicht die Kräfte benutzt, die aus Bausteinen bereits bekannt sind, sondern es werden nach bestimmten Regeln, Bausteine mit neuen Kräften "herangezogen", um die Vorgabewerte zu erfüllen. Dieses Verfahren ist nicht iterativ Könnte aber möglicherweise einen guten Startwert für oben genannte Methoden 1 und 2 liefern.
